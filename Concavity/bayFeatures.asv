function ft_vector = bayFeatures(chull,bays)

    % clear all;
    % clf;
    % load('E:\dev\Calli-FeatureExtractionMATLAB\letters and features\s\polygons\2.mat')

    ft_vector = zeros(12,6);    

    %Compute centroid and area of convex hull
    [chull_c,chull_a] = polygonCentroid(chull(:,1),chull(:,2));
    threshold = 0.005;

    MP = [];    %base midpoints IN POLAR
    BBOX = [];  %bounding boxes
    C = [];     %centroids
    W = [];     %widths
    H = [];     %heights
    S = [];     %solidity
    A = [];     %areas (relative to chull area)

    for i= 1:size(bays,2)

        % Compute angle of BASE for each bay Polygon
        bay = [bays(i).x bays(i).y]; %bay polygon
        P1 = [bays(i).x(1) bays(i).y(1)]; %base from P1-P2
        P2 = [bays(i).x(end) bays(i).y(end)];
        mp = (P1+P2)./2; %base midpoint;
        [th,rho] = cart2pol(mp(1),mp(2));
        if th<0
            th = (2*pi)+th;
        end
        MP = [MP; th rho];
        theta = angle2Points(P1,P2);
        theta = rad2deg(theta);

        %Translate P1 to origin
        tform1 = affine2d([ 1       0       0
            0       1       0
            -P1(1) -P1(2)  1]);
        [M2] = transformPointsForward(tform1,bay);

        %Temporarily Rotate Polygon so it is aligned with X-axis
        tform2 = affine2d([  cosd(theta) -sind(theta)    0
            sind(theta) cosd(theta)     0
            0           0               1]);
        [M2] = transformPointsForward(tform2,M2);

        %Compute bbox
        minx = min(M2(:,1));
        maxx = max(M2(:,1));
        miny = min(M2(:,2));
        maxy = max(M2(:,2));
        bbox = ([minx miny;
            maxx miny;
            maxx maxy;
            minx maxy;]);

        %Apply inverse transformation to Bbox
        bbox = transformPointsInverse(tform2,bbox);
        bbox = transformPointsInverse(tform1,bbox);

        %Width and height of bounding box
        h = max(bbox(:,2)) - min(bbox(:,2));
        w = max(bbox(:,1)) - min(bbox(:,1));

        W = [W; w];
        H = [H; h];

        %Solidity of the bay polygon: area/bbox area
        bb_area = polygonArea(bbox);
        [bay_centroid,bay_area] = polygonCentroid(bay);
        [th,rho] = cart2pol(bay_centroid(1),bay_centroid(2));
        if th<0
            th = (2*pi)+th;
        end
        bay_centroid = [th rho];
        solidity = bay_area/bb_area;
        S = [S; solidity];
        C = [C; bay_centroid];
        %bay area/chull area
        a= bay_area/chull_a;
        A = [A; a];





        %Visualize
        X = bays(i).x';
        Y = bays(i).y';
        hold on;
        patch(X,Y,'g');
        scatter(mp(1),mp(2),'o','MarkerFaceColor','red');
        drawPolygon(bbox);
        hold off;


    end

    %DEFINE AND VISUALIZE RADIAL AXES
    RX = [(0) (pi/6) (pi/3) (pi/2) (2*pi/3) (5*pi/6) (pi) (7*pi/6) (4*pi/3) (3*pi/2) (5*pi/3) (11*pi/6) (2*pi)]';
    hold on;
    axis([-2 2 -2 2]);
    for i = 1:length(RX)-1
        ray = createRay([0,0],RX(i));
        drawRay(ray,'LineStyle',':');
    end
    hold off;

    for i = 1:length(RX)-1
        %find candidates
        lb = RX(i);
        ub = RX(i+1);
        [ind] = find( MP(:,1)>lb&MP(:,1)<=ub);

        %select largest candidate
        [c,I] = max(A(ind));

        I = ind(I);

        %discard if smaller than threshold
        if ~(isempty(I))
            if (A(I)<threshold)
                ft_vector(i,:) = [0 0 0 0 0 0];
            else
                ru = [C(I,:) W(I) H(I) A(I) S(I)];
                ft_vector(i,:) = ru;
            end
        else
            ft_vector(i,:) = [0 0 0 0 0 0];
        end
    end

    %Reshape feature vector
    dummy = [];
    for row = 1:size(ft_vector,1)
        dummy = [dummy ft_vector(row,:)];
    end
    ft_vector = dummy;
    
end